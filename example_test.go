package main_test

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"strings"
)

type ExampleStruct struct {
	Name              string
	Age               int    `json:"age"`
	FavoriteColor     string `json:"favoriteColor" db:"favorite_color"`
	HighSchool        []byte `json:"hs" db:"-"`
	BestDanceMove     string `db:"best_dance" sfgen:"bd"`
	WorstDanceMove    string `db:"worst_dance" sfgen:",xml:-"`
	WeirdestDanceMove string `db:"weirdest_dance" sfgen:",xml:XMLWeirdDance"`
}

func Example() {
	commands := []string{
		fmt.Sprintf("go run . --struct=%T --out-pkg=foo --package=main_test --tests --dry-run --export", ExampleStruct{}),
		fmt.Sprintf("go run . --struct=%T --out-pkg=foo --package=main_test --tests --dry-run --export --tag=db", ExampleStruct{}),
		fmt.Sprintf("go run . --struct=%T --out-pkg=foo --package=main_test --tests --dry-run --export --tag=json", ExampleStruct{}),
		fmt.Sprintf("go run . --struct=%T --out-pkg=foo --package=main_test --tests --dry-run --export --tag=xml", ExampleStruct{}),
		fmt.Sprintf("go run . --struct=%T --out-pkg=foo --package=main_test --tests --dry-run --tag=xml --prefix=MyPrefix", ExampleStruct{}),
	}

	for _, cmdStr := range commands {
		parts := strings.Split(cmdStr, " ")
		cmd := exec.Command(parts[0], parts[1:]...)
		cmd.Stdout = os.Stdout
		cmd.Stderr = NewPrefixedWriter("STDERR:", os.Stderr)

		fmt.Printf("Executing %q\n\n", cmdStr)
		if err := cmd.Run(); err != nil {
			log.Fatalf("failed to execute command: %v", err)
		}
		fmt.Printf("\n--------\n")
	}

	// Output:
	// Executing "go run . --struct=main_test.ExampleStruct --out-pkg=foo --package=main_test --tests --dry-run --export"
	//
	// // Code generated by github.com/rad12000/go-sfgen; DO NOT EDIT.
	//
	// // Source .:
	//
	// package foo
	//
	// // Constants generated from [main_test.ExampleStruct] struct field
	// const (
	// 	FieldName              = "Name"
	// 	FieldAge               = "Age"
	// 	FieldFavoriteColor     = "FavoriteColor"
	// 	FieldHighSchool        = "HighSchool"
	// 	FieldBestDanceMove     = "bd"
	// 	FieldWorstDanceMove    = "WorstDanceMove"
	// 	FieldWeirdestDanceMove = "WeirdestDanceMove"
	// )
	//
	// --------
	// Executing "go run . --struct=main_test.ExampleStruct --out-pkg=foo --package=main_test --tests --dry-run --export --tag=db"
	//
	// // Code generated by github.com/rad12000/go-sfgen; DO NOT EDIT.
	//
	// // Source .:
	//
	// package foo
	//
	// // Constants generated from [main_test.ExampleStruct] struct field
	// const (
	// 	DBFieldName              = "Name"
	// 	DBFieldAge               = "Age"
	// 	DBFieldFavoriteColor     = "favorite_color"
	// 	DBFieldBestDanceMove     = "bd"
	// 	DBFieldWorstDanceMove    = "worst_dance"
	// 	DBFieldWeirdestDanceMove = "weirdest_dance"
	// )
	//
	// --------
	// Executing "go run . --struct=main_test.ExampleStruct --out-pkg=foo --package=main_test --tests --dry-run --export --tag=json"
	//
	// // Code generated by github.com/rad12000/go-sfgen; DO NOT EDIT.
	//
	// // Source .:
	//
	// package foo
	//
	// // Constants generated from [main_test.ExampleStruct] struct field
	// const (
	// 	JSONFieldName              = "Name"
	// 	JSONFieldAge               = "age"
	// 	JSONFieldFavoriteColor     = "favoriteColor"
	// 	JSONFieldHighSchool        = "hs"
	// 	JSONFieldBestDanceMove     = "bd"
	// 	JSONFieldWorstDanceMove    = "WorstDanceMove"
	// 	JSONFieldWeirdestDanceMove = "WeirdestDanceMove"
	// )
	//
	// --------
	// Executing "go run . --struct=main_test.ExampleStruct --out-pkg=foo --package=main_test --tests --dry-run --export --tag=xml"
	//
	// // Code generated by github.com/rad12000/go-sfgen; DO NOT EDIT.
	//
	// // Source .:
	//
	// package foo
	//
	// // Constants generated from [main_test.ExampleStruct] struct field
	// const (
	// 	XMLFieldName              = "Name"
	// 	XMLFieldAge               = "Age"
	// 	XMLFieldFavoriteColor     = "FavoriteColor"
	// 	XMLFieldHighSchool        = "HighSchool"
	// 	XMLFieldBestDanceMove     = "bd"
	// 	XMLFieldWeirdestDanceMove = "XMLWeirdDance"
	// )
	//
	// --------
	// Executing "go run . --struct=main_test.ExampleStruct --out-pkg=foo --package=main_test --tests --dry-run --tag=xml --prefix=MyPrefix"
	//
	// // Code generated by github.com/rad12000/go-sfgen; DO NOT EDIT.
	//
	// // Source .:
	//
	// package foo
	//
	// // Constants generated from [main_test.ExampleStruct] struct field
	// const (
	// 	myPrefixName              = "Name"
	// 	myPrefixAge               = "Age"
	// 	myPrefixFavoriteColor     = "FavoriteColor"
	// 	myPrefixHighSchool        = "HighSchool"
	// 	myPrefixBestDanceMove     = "bd"
	// 	myPrefixWeirdestDanceMove = "XMLWeirdDance"
	// )
	//
	// --------
}

func NewPrefixedWriter(prefix string, next io.Writer) PrefixedWriter {
	return PrefixedWriter{
		Prefix: []byte(prefix),
		Next:   next,
	}
}

type PrefixedWriter struct {
	Prefix []byte
	Next   io.Writer
}

func (p PrefixedWriter) Write(b []byte) (n int, err error) {
	var (
		prefixedBytes bytes.Buffer
		reader        = bytes.NewReader(b)
		scanner       = bufio.NewScanner(reader)
	)

	for scanner.Scan() {
		prefixedBytes.Write(p.Prefix)
		prefixedBytes.WriteByte(' ')
		prefixedBytes.Write(scanner.Bytes())
		prefixedBytes.WriteByte('\n')
	}

	_, err = p.Next.Write(prefixedBytes.Bytes())
	return len(b), err
}
